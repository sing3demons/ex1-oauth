### OAuth2 API Testing with HTTP Client
### Base URL
@baseUrl = http://localhost:8080/api/v1

### Variables for tokens (will be set after login)
@accessToken = 
@refreshToken = 

###############################################################################
### 1. USER REGISTRATION AND AUTHENTICATION
###############################################################################

### Register a new user
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "test@example.com",
  "username": "testuser",
  "password": "password123",
  "first_name": "Test",
  "last_name": "User"
}

### Login user
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123"
}

### Refresh token
POST {{baseUrl}}/auth/refresh
Content-Type: application/json

{
  "refresh_token": "{{refreshToken}}"
}

### Logout user
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{accessToken}}

###############################################################################
### 2. PROTECTED USER ENDPOINTS
###############################################################################

### Get user profile
GET {{baseUrl}}/profile
Authorization: Bearer {{accessToken}}

### Update user profile
PUT {{baseUrl}}/profile
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "first_name": "Updated Test",
  "last_name": "Updated User",
  "username": "updateduser"
}

### Get all users (admin only)
GET {{baseUrl}}/users?page=1&limit=10
Authorization: Bearer {{accessToken}}

###############################################################################
### 3. OAUTH2 ENDPOINTS
###############################################################################

### OAuth2 Authorization (GET request - will redirect)
### Note: This should be opened in a browser for the full flow
GET {{baseUrl}}/oauth/authorize?client_id=test-client-id&redirect_uri=http://localhost:3000/callback&response_type=code&scope=read&state=test123

### OAuth2 Token Exchange (Authorization Code Grant)
POST {{baseUrl}}/oauth/token
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=51c2ece4-ab29-4937-ad13-4911b50a314b&client_id=test-client-id&client_secret=test-client-secret&redirect_uri=http://localhost:3000/callback

### OAuth2 Token Exchange (Refresh Token Grant)
POST {{baseUrl}}/oauth/token
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=REFRESH_TOKEN_HERE&client_id=test-client-id&client_secret=test-client-secret

### OAuth2 User Info
GET {{baseUrl}}/oauth/userinfo
Authorization: Bearer {{accessToken}}

###############################################################################
### 4. EXAMPLE COMPLETE OAUTH2 FLOW
###############################################################################

### Step 1: Register a test user
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "oauth@example.com",
  "username": "oauthuser",
  "password": "oauth123456",
  "first_name": "OAuth",
  "last_name": "Test User"
}

### Step 2: Login to get JWT token
# @name loginResponse
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "oauth@example.com",
  "password": "oauth123456"
}

### Step 3: Use JWT token to access protected resources
GET {{baseUrl}}/profile
Authorization: Bearer {{loginResponse.response.body.access_token}}

### Step 4: Access OAuth userinfo endpoint
GET {{baseUrl}}/oauth/userinfo
Authorization: Bearer {{loginResponse.response.body.access_token}}

###############################################################################
### 5. ERROR TESTING
###############################################################################

### Test invalid credentials
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "invalid@example.com",
  "password": "wrongpassword"
}

### Test unauthorized access
GET {{baseUrl}}/profile

### Test invalid token
GET {{baseUrl}}/profile
Authorization: Bearer invalid.jwt.token

### Test missing required fields
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "incomplete@example.com"
}

### Test duplicate email registration
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "test@example.com",
  "username": "duplicate",
  "password": "password123",
  "first_name": "Duplicate",
  "last_name": "User"
}

###############################################################################
### 6. ADMIN TESTING
###############################################################################

### Create admin user (manual database entry would be needed)
### Or modify the first registered user to have admin role

### Test admin-only endpoint
GET {{baseUrl}}/users
Authorization: Bearer {{accessToken}}

###############################################################################
### 7. PERFORMANCE TESTING
###############################################################################

### Test multiple rapid requests
GET {{baseUrl}}/profile
Authorization: Bearer {{accessToken}}

###
GET {{baseUrl}}/profile
Authorization: Bearer {{accessToken}}

###
GET {{baseUrl}}/profile
Authorization: Bearer {{accessToken}}

###############################################################################
### 8. CORS TESTING
###############################################################################

### Test OPTIONS request (CORS preflight)
OPTIONS {{baseUrl}}/auth/login
Access-Control-Request-Method: POST
Access-Control-Request-Headers: Content-Type, Authorization
Origin: http://localhost:3000

###############################################################################
### 9. HEALTH CHECK AND INFO
###############################################################################

### Basic connectivity test
GET {{baseUrl}}/profile
Authorization: Bearer invalid-token

### This should return 401 Unauthorized, confirming the server is responding
